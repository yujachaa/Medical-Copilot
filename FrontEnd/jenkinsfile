

pipeline {
		environment { 
			dockerImage = ''
		}
		
		agent any 
		
		stages {
			stage('GitHub Repository Clone') { 
				steps {
					git branch: 'develop', credentialsId: 'git-access-token', url: 'https://lab.ssafy.com/s11-final/S11P31S205.git'
				}
			} 
			stage('Prepare Environment') {
            	steps {
					sshagent(['ssh-key']) {
						sh 'ssh-keyscan -H medical-copilot.net >> ~/.ssh/known_hosts'
						sh 'scp ubuntu@medical-copilot.net:/home/ubuntu/medical-copilot/frontend/onpremise/.env ./FrontEnd/.env'
					}		
				}
        	}
        
			 
			stage('Build image') {
				steps {
					script {
						dockerimage = docker.build("jiyoungheo/medical-copilot-front-onpremise:v1", "./FrontEnd")
					}
				}
			}
			
			stage('Push image') {
				steps {
					script {
						withDockerRegistry(credentialsId: 'dockerhub-accesstoken') {
							dockerimage.push()
						}
					}
				}
			}

			stage('EC2 connect') {
				steps {
					sshagent(['ssh-key']) {
					    withCredentials([string(credentialsId: 'dockerhub-password', variable: 'DOCKERHUB_PASSWORD')]) {
						sh """
							ssh -o StrictHostKeyChecking=no ubuntu@medical-copilot.net '
							docker stop medical-copilot-front-onpremise
							docker rm medical-copilot-front-onpremise
							docker image prune -f
							docker login -u jiyoungheo.dev@gmail.com -p $DOCKERHUB_PASSWORD
							docker pull jiyoungheo/medical-copilot-front-onpremise:v1
							docker run -d -p 3001:3001 -p 6006:6006 -v /home/ubuntu/medical-copilot/frontend/onpremise/.env:/app/.env --name medical-copilot-front-onpremise jiyoungheo/medical-copilot-front-onpremise:v1
							'
						"""
					    }
					}
				}
			}
		}
		post {
        success {
        	script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                mattermostSend (color: 'good', 
                message: "빌드 성공: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)", 
				endpoint: 'https://meeting.ssafy.com/hooks/ypu137wxnf8sx8ywhdw95ttn8o', 
                channel: 's205_git'
                )
            }
        }
        failure {
        	script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                mattermostSend (color: 'danger', 
                message: "빌드 실패: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)", 
				endpoint: 'https://meeting.ssafy.com/hooks/ypu137wxnf8sx8ywhdw95ttn8o', 
                channel: 's205_git'
                )
            }
        }
    }
}
